def suma_total (cadena :List[int]) -> int:
    res:int = 0
    for i in cadena:
        res += i
    return res
 
def suma_total_v2 (cadena :List[int]) -> int:
    res:int = 0
    for i in range (len(cadena)):
        res += cadena[i]
    return res
 
st = [2, 5, 0, 10]
#print (suma_total(st))
#print (suma_total_v2(st) == 17)
 
 
#1.1
def pertenece_v1 (cadena :List[int], elem: int) -> bool:
    for i in cadena:
        if i == elem:
            return True
    return False
 
def pertenece_v2 (cadena :List[int], elem: int) -> bool:
    res: bool = False
    for i in cadena:
        if i == elem:
            res = True
 
    return res
 
def pertenece_v3 (cadena :List[int], elem: int) -> bool:
    return elem in cadena
 
print (pertenece_v1([2,4,5,6], 5))
print (pertenece_v1([2,4,5,6], 7))
 
def pertenece_w(s:[int], e:int) -> bool:
      longitud:int = len(s)
      indice_actual:int = 0
      pertenece:bool = False
 
      while indice_actual < longitud:
        if s[indice_actual] == e:
            pertenece = True
        indice_actual = indice_actual + 1
 
      return pertenece
 
def pertenece_w_2(s:[int], e:int) -> bool:
    longitud:int = len(s)
    indice_actual:int = 0
    pertenece:bool = False
 
    while (indice_actual < longitud) and (not pertenece):
        if (s[indice_actual] == e):
            pertenece = True
        indice_actual = indice_actual + 1
 
    return pertenece


----------
#1.7
def tiene_minuscula (cadena: str) -> bool :
    res: bool = False
    for c in cadena:
        if 'a' <= c and c <= 'z' :
            res = True
    return res 
 
def tiene_mayuscula (cadena: str) -> bool :
    res: bool = False
    for c in cadena:
        if 'A' <= c and c <= 'Z' :
            res = True
    return res 
 
def tiene_numeros (cadena: str) -> bool :
    res: bool = False
    for c in cadena:
        if '0' <= c and c <= '9' :
            res = True
    return res 

def fortaleza_PWD_v2 (cadena: str) -> str:
    tiene_min: bool = tiene_minuscdef fortaleza_PWD_v2 (cadena: str) -> str:
    tiene_min: bool = tiene_minuscula(cadena)
    tiene_may: bool = tiene_mayuscula(cadena)
    tiene_mum: bool = tiene_numeros(cadena)
    mayor_a_8: bool = len(cadena) > 8
 
    if tiene_may and tiene_mum and tiene_min and mayor_a_8 :
        return "VERDE"
    elif len(cadena) < 5 :
        return "ROJA"
    else :
        return "AMARILLA"
 
 
 
x = fortaleza_PWD_v2 ("a6$_Afghij5Dklmnopqrstuvwxyz")
x = fortaleza_PWD_v2 ("a6$_")
x = fortaleza_PWD_v2 ("Dklmnopqrstuvwxyz")
 
def fortaleza_PWD_v1 (cadena: str) -> str:
    tiene_min: bool = False
    tiene_may: bool = False
    tiene_mum: bool = False
    mayor_a_8: bool = len(cadena) > 8
 
    for c in cadena:
        if c.isalpha():
            if c.islower():
                tiene_min = True
            elif c.isupper():
                tiene_may = True
        elif c.isnumeric():
            tiene_mum = True
 
    if tiene_may and tiene_mum and tiene_min and mayor_a_8 :
        return "VERDE"
    elif len(cadena) < 5 :
        return "ROJA"
    else :
        return "AMARILLA"ula(cadena)
    tiene_may: bool = tiene_mayuscula(cadena)
    tiene_mum: bool = tiene_numeros(cadena)
    mayor_a_8: bool = len(cadena) > 8
 
    if tiene_may and tiene_mum and tiene_min and mayor_a_8 :
        return "VERDE"
    elif len(cadena) < 5 :
        return "ROJA"
    else :
        return "AMARILLA"
 
 
 
x = fortaleza_PWD_v2 ("a6$_Afghij5Dklmnopqrstuvwxyz")
x = fortaleza_PWD_v2 ("a6$_")
x = fortaleza_PWD_v2 ("Dklmnopqrstuvwxyz")
 
def fortaleza_PWD_v1 (cadena: str) -> str:
    tiene_min: bool = False
    tiene_may: bool = False
    tiene_mum: bool = False
    mayor_a_8: bool = len(cadena) > 8
 
    for c in cadena:
        if c.isalpha():
            if c.islower():
                tiene_min = True
            elif c.isupper():
                tiene_may = True
        elif c.isnumeric():
            tiene_mum = True
 
    if tiene_may and tiene_mum and tiene_min and mayor_a_8 :
        return "VERDE"
    elif len(cadena) < 5 :
        return "ROJA"
    else :
        return "AMARILLA"



#Una funcion que ordene de menor a mayor una lista o sea que el siguiente sea siempre mayor al anterior

def oredenados(cadena:[int])->bool:
    ordenadoPadre:bool= False
    indiceActual:int= 1
    i:int= 0
    
    while i < len(cadena):
        if cadena[i] > 0 and cadena[i] > cadena[i+1]:
            ordenadoPadre = True
            i+=1
        else:
            ordenadoPadre = False
    return ordenadoPadre
    
print(oredenados([10,2,4]))



---------------------------------------------------------------------------------------

relacionesValidas2 :: [(String,String)] -> Bool
relacionesValidas2 [] = False
relacionesValidas2 relaciones = nosonigua relaciones && not (componentesDif relaciones)

nosonigua :: [(String,String)] -> Bool
nosonigua [] = True
nosonigua ((a,b):xs) = a /= b && nosonigua xs

componentesDif :: [(String,String)] -> Bool
componentesDif [] = True
componentesDif ((a,b):xs) = comparar (a,b) xs && componentesDif xs

comparar :: (String,String) -> [(String,String)] -> Bool
comparar _ [] = True
comparar (a,b) ((x,y):xs) = ( (a == x && b == y) || (a == y && b == x) ) && comparar (x,y) xs


personas :: [(String,String)] -> [String]
personas [] = []
personas listadeper
    | not (relacionesValidas listadeper)  = []
    | otherwise = noseREp (pasaTupAList listadeper)



pasaTupAList :: [(String,String)] -> [String]
pasaTupAList [] = []
pasaTupAList ((x,y):xs) = x:y:pasaTupAList xs

noseREp :: [String] -> [String]
noseREp [] = []
noseREp (x:xs) 
    | pertenece x xs = noseREp xs
    | otherwise = x : noseREp xs


pertenece :: Eq t => t -> [t] -> Bool
pertenece _ [] = False
pertenece n (x:xs)
    | n == x = True
    | otherwise = pertenece n xs

amigosDe :: String -> [(String,String)] -> [String]
amigosDe _ [] = []
amigosDe persona listaAmi
    | not (relacionesValidas listaAmi) = []
    | otherwise = verificarpersona persona listaAmi

verificarpersona :: String -> [(String,String)] -> [String]
verificarpersona _ [] = []
verificarpersona perso ((s,d):sd)
    | perso == s = d : verificarpersona perso sd
    | perso == d = s : verificarpersona perso sd
    | otherwise = verificarpersona perso sd






